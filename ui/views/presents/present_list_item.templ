package presents

import "github.com/MorrisMorrison/retfig/utils/links"

import "github.com/MorrisMorrison/retfig/ui/viewmodels"
import "github.com/MorrisMorrison/retfig/ui/views/comments"
import "github.com/MorrisMorrison/retfig/ui/views/votes"
import "github.com/MorrisMorrison/retfig/ui/viewcontext"


import "fmt"

templ PresentListItem(vc *viewcontext.ViewContext, vm *viewmodels.PresentListItemViewModel) {
	<div id={ "present_" + vm.PresentId } class="mb-4" x-data={ "{showComments: false" }>
		<div class="is-flex is-flex-direction-column has-background-primary has-text-light box mb-0">
			<div class="is-flex is-justify-content-space-between is-align-items-center">
				<div class="is-flex is-align-items-center">
					<span class="has-text-weight-semibold is-size-4">{ vm.Name }</span>
				</div>
				<span class="has-text-weight-semibold">{ vm.CreatedBy } - { vm.CreatedAt }</span>
			</div>
			<div class="is-flex is-justify-content-space-between mt-2">
				<span>{ vm.Link }</span>
				<div class="is-flex">
					<form
						if (vm.IsClaimed && vm.ClaimedBy == vc.CurrentUser) {
							hx-delete={ links.BuildClaimPresentLink(vm.EventId, vm.PresentId) }
						} else {
							hx-post={ links.BuildClaimPresentLink(vm.EventId, vm.PresentId) }
						}
						hx-target={ "#present_" + vm.PresentId }
						hx-swap="outerHTML"
						hx-ext="json-enc"
					>
						<div class="is-flex is-align-items-baseline">
							<button
								class="button is-primary"
							>
								<span class="icon">
									if (vm.IsClaimed && vm.ClaimedBy == vc.CurrentUser) {
										<i class="fa-solid has-text-warning fa-hand"></i>
									} else if (vm.IsClaimed && vm.ClaimedBy != vc.CurrentUser) {
										<i class="fa-solid has-text-danger fa-hand"></i>
									} else {
										<i class="fa-regular has-text-light fa-hand"></i>
									}
								</span>
							</button>
						</div>
					</form>
					@votes.VoteButtons(&viewmodels.VoteButtonsViewModel{
						EventId: vm.EventId,
						PresentId: vm.PresentId,
						UpvoteCount: vm.UpvoteCount,
						DownvoteCount: vm.DownvoteCount,
						CreatedBy: vm.CreatedBy, 
						IsUpvotedByUser: true,
						IsDownvotedByUser: false,
					})
					<div class="is-flex is-align-items-baseline">
						<span class="has-text-light">{ fmt.Sprint(vm.CommentCount) }</span>
						<button
							@click="showComments = !showComments"
							class="button is-primary"
							hx-get={ links.BuildGetCommentsLink(vm.EventId, vm.PresentId) }
							hx-target={ "#comments_" + vm.PresentId }
							hx-swap="outerHTML"
							hx-ext="json-enc"
						>
							<span class="icon">
								<i :class="{ 'fa-solid': showComments, 'fa-regular': !showComments}" class="fa-comments has-text-light"></i>
							</span>
						</button>
					</div>
				</div>
			</div>
		</div>
		<div x-show="showComments" style="display: none;">
			<div id={ "comments_" + vm.PresentId }>
				@comments.CommentList(vm.Comments)
			</div>
		</div>
	</div>
	<div id="noPresentsMessage" hx-swap-oob="true"></div>
}
